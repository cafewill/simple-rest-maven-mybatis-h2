swagger.title=济州-YEORA 后端 API
swagger.version=v1.0
swagger.description=济州-YEORA 服务的后端 API 规范。
swagger.contact.name=济州-YEORA 开发团队
swagger.contact.url=https://www.instagram.com/jeju_yeora

api.response.ok=成功响应
api.response.fail=失败响应
api.response.redirect=转发成功
api.response.authorized=身份验证成功。
api.response.unauthorized=身份验证失败。
api.response.error=服务器错误
api.response.jwt.expired=令牌已过期。
api.response.jwt.invalid=无效的令牌。

api.home.summary=根路径转发（替代 403 或 404 错误的默认响应）
api.home.description=当请求 ‘/’ 时，返回 HTTP 200 并转发到 /welcome
api.welcome.summary=获取多语言欢迎消息
api.welcome.description=根据 Accept-Language 头返回对应的问候语。

api.auth.summary=登录
api.auth.description=验证用户名/密码并返回 JWT

welcome=欢迎 : {0}

# DemoController – Insert
api.demo.insert.summary=创建新示例
api.demo.insert.description=根据 DemoRequest DTO 提供的数据保存新示例
api.demo.insert.responses.ok=创建成功
api.demo.insert.responses.bad_request=无效的请求
api.demo.insert.responses.error=服务器错误

# DemoController – SelectAll
api.demo.selectAll.summary=获取所有示例
api.demo.selectAll.description=返回所有已保存示例的列表
api.demo.selectAll.responses.ok=查询成功
api.demo.selectAll.responses.error=服务器错误

# DemoController – SelectById
api.demo.selectById.summary=根据 ID 获取示例
api.demo.selectById.description=返回与所给 PathVariable ID 对应的示例
api.demo.selectById.responses.ok=查询成功
api.demo.selectById.responses.bad_request=无效的 ID
api.demo.selectById.responses.not_found=未找到示例
api.demo.selectById.responses.error=服务器错误

# DemoController – UpdateById
api.demo.updateById.summary=更新示例
api.demo.updateById.description=使用提供的 RequestBody 数据更新由 PathVariable ID 指定的示例
api.demo.updateById.responses.ok=更新成功
api.demo.updateById.responses.bad_request=无效的 ID 或请求
api.demo.updateById.responses.not_found=示例不存在
api.demo.updateById.responses.error=服务器错误

# DemoController – DeleteById
api.demo.deleteById.summary=删除示例
api.demo.deleteById.description=删除由给定 PathVariable ID 指定的示例
api.demo.deleteById.responses.ok=删除成功
api.demo.deleteById.responses.bad_request=无效的 ID
api.demo.deleteById.responses.not_found=示例不存在
api.demo.deleteById.responses.error=服务器错误

# ItemController – Insert
api.item.insert.summary=新增项目
api.item.insert.description=根据 CommonRequest DTO 保存新的项目
api.item.insert.responses.ok=创建成功
api.item.insert.responses.bad_request=请求无效
api.item.insert.responses.error=服务器错误

# ItemController – SelectAll
api.item.selectAll.summary=获取所有项目
api.item.selectAll.description=返回所有已注册的项目列表
api.item.selectAll.responses.ok=查询成功
api.item.selectAll.responses.error=服务器错误

# ItemController – SelectById
api.item.selectById.summary=按ID获取项目
api.item.selectById.description=返回指定 ID 的项目
api.item.selectById.responses.ok=查询成功
api.item.selectById.responses.bad_request=无效的 ID
api.item.selectById.responses.not_found=项目未找到
api.item.selectById.responses.error=服务器错误

# ItemController – UpdateById
api.item.updateById.summary=更新项目
api.item.updateById.description=根据指定 ID 和请求体修改项目
api.item.updateById.responses.ok=更新成功
api.item.updateById.responses.bad_request=无效的 ID 或请求
api.item.updateById.responses.not_found=项目未找到
api.item.updateById.responses.error=服务器错误

# ItemController – DeleteById
api.item.deleteById.summary=删除项目
api.item.deleteById.description=删除指定 ID 的项目
api.item.deleteById.responses.ok=删除成功
api.item.deleteById.responses.bad_request=无效的 ID
api.item.deleteById.responses.not_found=项目未找到
api.item.deleteById.responses.error=服务器错误

# MemberController – Insert
api.member.insert.summary=新增用户
api.member.insert.description=根据 CommonRequest DTO 保存新的用户
api.member.insert.responses.ok=注册成功
api.member.insert.responses.bad_request=请求无效
api.member.insert.responses.error=服务器错误

# MemberController – SelectAll
api.member.selectAll.summary=获取所有用户
api.member.selectAll.description=返回所有已注册的用户列表
api.member.selectAll.responses.ok=查询成功
api.member.selectAll.responses.error=服务器错误

# MemberController – SelectById
api.member.selectById.summary=按ID获取用户
api.member.selectById.description=返回指定 ID 的用户
api.member.selectById.responses.ok=查询成功
api.member.selectById.responses.bad_request=无效的 ID
api.member.selectById.responses.not_found=未找到用户
api.member.selectById.responses.error=服务器错误

# MemberController – UpdateById
api.member.updateById.summary=更新用户
api.member.updateById.description=根据指定 ID 和请求体修改用户
api.member.updateById.responses.ok=更新成功
api.member.updateById.responses.bad_request=无效的 ID 或请求
api.member.updateById.responses.not_found=未找到用户
api.member.updateById.responses.error=服务器错误

# MemberController – DeleteById
api.member.deleteById.summary=删除用户
api.member.deleteById.description=删除指定 ID 的用户
api.member.deleteById.responses.ok=删除成功
api.member.deleteById.responses.bad_request=无效的 ID
api.member.deleteById.responses.not_found=未找到用户
api.member.deleteById.responses.error=服务器错误
